# Contiuous Delivery (CD) for site deployment
# - run tests and static site export
# - compress static site export artifact
# - update enironment release with new artifact
# - create new deployment in environment with state 'pending'

name: Release

on:
  push:
    branches: ["PRODUCTION_BRANCH", "DEVELOPMENT_BRANCH"]
  workflow_call:

concurrency:
  group: ${{ github.ref_name }}
  cancel-in-progress: false

env:
  SHOULD_DEPLOY: ${{ github.repository == 'ME/MY_REPOSITORY' }}
  DEPLOY_ENVIRONMENT: ${{ github.ref_name == 'PRODUCTION_BRANCH' && 'production' || 'development' }}
  DEPLOY_URL: ${{ github.ref_name == 'PRODUCTION_BRANCH' && 'PRODUCTION_URL' || 'DEVELOPMENT_URL' }}

jobs:
  prepare:
    name: Prepare
    runs-on: ubuntu-latest

    outputs:
      timestamp: ${{ steps.gen-id.outputs.timestamp }}
      artifact-id: ${{ steps.gen-id.outputs.artifact-id }}
      should-deploy: ${{ steps.gen-id.outputs.should-deploy }}

    steps:
      - name: Generate unique artifact id
        id: gen-id
        run: |
          export TIMESTAMP="$( date +%s )"
          echo "timestamp=${TIMESTAMP}" >> "${GITHUB_OUTPUT}"
          echo "artifact-id=site-export_$( date +%Y%m%d%H%M%S -d @${TIMESTAMP} )_${{ github.sha }}" >> "${GITHUB_OUTPUT}"
          echo "should-deploy=${{ env.SHOULD_DEPLOY }}" >> "${GITHUB_OUTPUT}"

  build:
    name: Test and build

    needs: [prepare]

    uses: ./.github/workflows/development.yml
    with:
      upload-artifact: ${{ fromJSON(needs.prepare.outputs.should-deploy) }}
      artifact-id: ${{ needs.prepare.outputs.artifact-id }}

  release:
    name: Deploy
    runs-on: ubuntu-latest

    needs: [prepare, build]
    if: fromJSON(needs.prepare.outputs.should-deploy)

    permissions:
      contents: write
      deployments: write

    steps:
      - name: Download archive
        id: download
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.prepare.outputs.artifact-id }}

      - name: Compress archive
        id: compress
        env:
          ARTIFACT_PATH: '${{ steps.download.outputs.download-path }}/${{ needs.build.outputs.artifact-id }}'
        run: |
          zstd -k -12 "${{ env.ARTIFACT_PATH }}" && ls -lh "${{ env.ARTIFACT_PATH }}" "${{ env.ARTIFACT_PATH }}.zst"
          echo "artifact-id=$( basename '${{ env.ARTIFACT_PATH }}.zst' )" >> "${GITHUB_OUTPUT}"
          echo "artifact-path=${{ env.ARTIFACT_PATH }}.zst" >> "${GITHUB_OUTPUT}"

      - name: Sign archive artifact
        id: sign
        env:
          ARTIFACT_PATH: '${{ steps.compress.outputs.artifact-path }}'
          SECRET: '${{ secrets.DEPLOYMENT_KEY }}'
        run: |
          export CHECKSUM="$(openssl dgst -hmac "${SECRET}" -sha256 -binary "${{ env.ARTIFACT_PATH }}" | hexdump -e '"sha256=" 32/1 "%02x" "\n"')"
          echo "artifact-checksum=${CHECKSUM}" >> "${GITHUB_OUTPUT}"

      - name: Update release tag
        uses: actions/github-script@v7
        with:
          script: |
            const { DEPLOY_ENVIRONMENT } = process.env
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `tags/${DEPLOY_ENVIRONMENT}`,
              sha: context.sha
            }).catch(err => {
              if (err.status !== 422) throw err
              github.rest.git.updateRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `tags/${DEPLOY_ENVIRONMENT}`,
                sha: context.sha
              })
            })

      - name: Generate release notes
        id: gen-notes
        uses: actions/github-script@v7
        env:
          TIMESTAMP: ${{ needs.prepare.outputs.timestamp }}
        with:
          result-encoding: string
          script: |
            const { TIMESTAMP, DEPLOY_ENVIRONMENT, DEPLOY_URL } = process.env

            const getCommitLink = (sha) => {
              if (sha) return `[\`${sha.substring(0, 7)}\`](../../commit/${sha})`
            }
            const pad = (len, n) => String(n).padStart(len, "0")

            const ref_name = context.ref.split("/").reverse()[0]
            const branchLink = `[\`${ref_name}\`](../../tree/${ref_name})`
            const headLink = `[\`${context.sha.substring(0, 7)}\`](../../commit/${context.sha})`

            const now = new Date(parseInt(TIMESTAMP) * 1000)
            const creationTime = `${pad(4, now.getFullYear())}-${pad(2, now.getMonth() + 1)}-${pad(2, now.getDate())} ` +
                                 `${pad(2, now.getHours())}:${pad(2, now.getMinutes())}:${pad(2, now.getSeconds())}`

            const releaseNotes = `Static export of branch ${branchLink} (${headLink}) created on *${creationTime}*.\n` +
                                 `Triggered by push from *${context.payload.pusher.name}*.\n\n` +
                                 `To be deployed as \`${DEPLOY_ENVIRONMENT}\` on <${DEPLOY_URL}>.\n\n`

            let changelog = ""
            for (const commit of context.payload.commits.reverse()) {
              changelog += `- ${getCommitLink(commit.id) ?? ""} ${commit.message.split("\n", 1)[0]} â€” by *${commit.author.username ?? commit.author.name}*\n`
            }

            return releaseNotes + (changelog ? `\n\n### Recent Changes\n\n${changelog}` : "")

      - name: Update release
        id: release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.DEPLOY_ENVIRONMENT }}
          target_commitish: ${{ github.sha }}
          name: ${{ env.DEPLOY_ENVIRONMENT }}
          body: ${{ steps.gen-notes.outputs.result }}
          draft: false
          prerelease: true
          files: ${{ steps.compress.outputs.artifact-path }}

      - name: Clean up workflow artifacts
        uses: geekyeggo/delete-artifact@v5
        with:
          name: ${{ needs.prepare.outputs.artifact-id }}
          failOnError: false

      - name: Generate deployment payload
        id: gen-payload
        uses: actions/github-script@v7
        env:
          ARTIFACT_URL: ${{ fromJSON(steps.release.outputs.assets)[0].url }}
          ARTIFACT_NAME: ${{ fromJSON(steps.release.outputs.assets)[0].name }}
          ARTIFACT_CHECKSUM: ${{ steps.sign.outputs.artifact-checksum }}
        with:
          script: |
            const { ARTIFACT_URL, ARTIFACT_NAME, ARTIFACT_CHECKSUM } = process.env

            const isEqual = (a, b) => {
              if (Object.keys(a).length !== Object.keys(b).length) return false
              for (const key of Object.keys(a)) {
                if (a[key] !== b[key]) return false
              }
              return true
            }

            const authors = []
            for (const commit of context.payload.commits) {
              if (commit.author && !authors.some((author) => isEqual(author, commit.author))) authors.push(commit.author)
              if (commit.commiter && !authors.some((author) => isEqual(author, commit.comitter))) authors.push(commit.comitter)
            }

            return {
              "artifact": {
                "url": ARTIFACT_URL,
                "name": ARTIFACT_NAME,
                "checksum": ARTIFACT_CHECKSUM,
              },
              "pusher": context.payload.pusher,
              "authors": authors,
            }

      - name: Generate deployment description
        id: gen-description
        uses: actions/github-script@v7
        env:
          TIMESTAMP: ${{ needs.prepare.outputs.timestamp }}
        with:
          result-encoding: string
          script: |
            const { TIMESTAMP, DEPLOY_ENVIRONMENT } = process.env

            const pad = (len, n) => String(n).padStart(len, "0")

            const ref_name = context.ref.split("/").reverse()[0]
            const now = new Date(parseInt(TIMESTAMP) * 1000)

            const creationTime = `${pad(4, now.getFullYear())}-${pad(2, now.getMonth() + 1)}-${pad(2, now.getDate())} ` +
                                 `${pad(2, now.getHours())}:${pad(2, now.getMinutes())}:${pad(2, now.getSeconds())}`

            return `Automatic ${DEPLOY_ENVIRONMENT} deployment triggered by push to '${ref_name}' by ${context.payload.pusher.name} on ${creationTime}.`

      - name: Create deployment
        id: deployment
        uses: chrnorm/deployment-action@v2
        with:
          token: '${{ github.token }}'
          environment: ${{ env.DEPLOY_ENVIRONMENT }}
          environment-url: ${{ env.DEPLOY_URL }}
          description: ${{ steps.gen-description.outputs.result }}
          payload: ${{ steps.gen-payload.outputs.result }}
          ref: ${{ github.ref_name }}
          sha: ${{ github.sha }}
          initial-status: "pending"
          auto-inactive: true
          auto-merge: false

      - name: Clean up outdated release artifacts
        uses: actions/github-script@v7
        env:
          RELEASE_ID: ${{ steps.release.outputs.id }}
          ARTIFACT_ID: ${{ steps.release.outputs.assets[0].id }}
        with:
          script: |
            const { RELEASE_ID, ARTIFACT_ID } = process.env

            const assets = await github.rest.repos.listReleaseAssets({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: RELEASE_ID,
            })

            if (assets.data.length <= 5) {
              console.log("Fewer than 5 assets, skip")
              return
            }

            assets.data.sort((a, b) => Date.parse(a.updated_at) - Date.parse(b.updated_at))
            const outdated = assets.data.slice(0, -5)

            for (const asset of outdated) {
              if (asset.id == ARTIFACT_ID) {
                console.warn("Attempted to delete newly added artifact!")
                continue
              }

              console.log(`Delete outdated asset: ${asset.id}`)
              console.log(`  - Name: ${asset.name}`)
              console.log(`  - Last updated: ${asset.updated_at}`)

              github.rest.repos.deleteReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                asset_id: asset.id,
              }).catch(err => {
                console.error(`Deleting asset ${asset.id} failed: ${err}`)
              })
            }
